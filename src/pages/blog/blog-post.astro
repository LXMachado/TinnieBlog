---
import BlogLayout from '../../layouts/BlogLayout.astro';
import Button from '../../components/Button.astro';
import Card from '../../components/Card.astro';

// Sample date for the blog post
const publishDate = "May 12, 2023";
---

<BlogLayout 
  title="Build Your Own AI Chatbot with React and OpenAI API"
  description="This tutorial guides you through building a smart, conversational chatbot using React and the OpenAI API, perfect for enhancing your web applications with AI."
  publishDate={publishDate}
>
  <div class="mb-8">
    <img 
      src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg" 
      alt="React logo" 
      class="w-12 h-12 inline-block mr-2" 
    />
    <img 
      src="https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg" 
      alt="JavaScript logo" 
      class="w-12 h-12 inline-block mr-2" 
    />
    <span class="inline-block px-3 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary mb-3 ml-2">
      Tutorial
    </span>
    <span class="inline-block px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-800/30 dark:text-yellow-300 mb-3 ml-2">
      Intermediate
    </span>
  </div>

  <p class="lead text-xl text-gray-700 dark:text-gray-300 mb-8">
    In this tutorial, we'll build a smart, conversational AI chatbot using React and the OpenAI API. By the end, you'll have a functional chatbot that can engage in natural conversation, answer questions, and even generate creative content.
  </p>

  <div class="glass p-6 mb-8">
    <h2 class="text-xl font-bold mb-4">What You'll Learn</h2>
    <ul class="list-disc pl-6 space-y-2">
      <li>Setting up a React application for an AI chatbot</li>
      <li>Integrating with the OpenAI API</li>
      <li>Creating a responsive chat interface</li>
      <li>Handling conversational context and user interactions</li>
      <li>Deploying your AI chatbot to production</li>
    </ul>
  </div>

  <h2 class="text-2xl font-bold mb-4">Prerequisites</h2>
  <p class="mb-6">Before we begin, make sure you have the following:</p>
  <ul class="list-disc pl-6 space-y-2 mb-8">
    <li>Basic knowledge of React and JavaScript</li>
    <li>Node.js and npm installed on your computer</li>
    <li>An OpenAI API key (you can get one from the <a href="https://platform.openai.com/signup" target="_blank" rel="noopener noreferrer">OpenAI website</a>)</li>
    <li>A code editor (like VS Code)</li>
  </ul>

  <h2 class="text-2xl font-bold mb-4">Step 1: Setting Up the React Project</h2>
  <p class="mb-4">Let's start by creating a new React application using Create React App:</p>

  <div class="bg-gray-800 text-white p-4 rounded-md mb-6 overflow-x-auto">
    <pre><code>npx create-react-app ai-chatbot
cd ai-chatbot
npm start</code></pre>
  </div>

  <p class="mb-8">This will create a new React project and start the development server. Next, let's install the dependencies we'll need:</p>

  <div class="bg-gray-800 text-white p-4 rounded-md mb-8 overflow-x-auto">
    <pre><code>npm install axios styled-components react-icons</code></pre>
  </div>

  <h2 class="text-2xl font-bold mb-4">Step 2: Creating the Chat Interface</h2>
  <p class="mb-4">First, let's create a simple chat interface. Create a new file called <code>ChatInterface.js</code> in the <code>src</code> folder:</p>

    <div class="bg-gray-800 text-white p-4 rounded-md mb-6 overflow-x-auto">
    <pre><code>import React, &#123; useState, useRef, useEffect &#125; from 'react';
import styled from 'styled-components';
import &#123; FiSend, FiUser, FiCpu &#125; from 'react-icons/fi';

const ChatContainer = styled.div`
  display: flex;
  flex-direction: column;
  height: 100vh;
  max-width: 800px;
  margin: 0 auto;
  padding: 1rem;
`;

const ChatHeader = styled.div`
  background: #007afe;
  color: white;
  padding: 1rem;
  border-radius: 10px 10px 0 0;
  font-weight: bold;
  font-size: 1.2rem;
`;

const MessageArea = styled.div`
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background: #f5f5f5;
  border-left: 1px solid #e0e0e0;
  border-right: 1px solid #e0e0e0;
`;

const InputArea = styled.div`
  display: flex;
  padding: 1rem;
  background: white;
  border: 1px solid #e0e0e0;
  border-radius: 0 0 10px 10px;
`;

const MessageInput = styled.input&#96;
  flex: 1;</code></pre>
  </div>

  <p class="mb-8">This sets up a basic chat interface with a header, message area, and input field. Now we need to integrate it with the OpenAI API.</p>

  <h2 class="text-2xl font-bold mb-4">Step 3: Integrating with the OpenAI API</h2>
  <p class="mb-4">Let's create a service to interact with the OpenAI API. Create a new file called <code>openaiService.js</code> in the <code>src</code> folder:</p>

  <div class="bg-gray-800 text-white p-4 rounded-md mb-6 overflow-x-auto">
    <pre><code>import axios from 'axios';

const API_URL = 'https://api.openai.com/v1/chat/completions';

const openaiService = {
  generateResponse: async (messages, apiKey) => {
    try {
      const response = await axios.post(
        API_URL,
        {
          model: 'gpt-3.5-turbo',
          messages: messages.map(msg => ({
            role: msg.isUser ? 'user' : 'assistant',
            content: msg.text
          })),
          temperature: 0.7,
          max_tokens: 150
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
          }
        }
      );
      
      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('Error calling OpenAI API:', error);
      return 'Sorry, I encountered an error. Please try again later.';
    }
  }
};

export default openaiService;</code></pre>
  </div>

  <p class="mb-4">Now, let's update our <code>ChatInterface.js</code> file to use this service. We'll need to add state for the API key and handle the API calls:</p>

  <div class="bg-gray-800 text-white p-4 rounded-md mb-8 overflow-x-auto">
    <pre><code>// Add this import at the top
import openaiService from './openaiService';

// Inside the ChatInterface component, add a new state for the API key
const [apiKey, setApiKey] = useState('');
const [showApiKeyPrompt, setShowApiKeyPrompt] = useState(true);

// Update the handleSend function
const handleSend = async () => {
  if (input.trim() === '') return;
  
  // Add user message
  const updatedMessages = [...messages, { text: input, isUser: true }];
  setMessages(updatedMessages);
  setInput('');
  
  // Add a loading message
  setMessages(prev => [...prev, { text: "Thinking...", isUser: false, isLoading: true }]);
  
  try {
    // Call OpenAI API
    const response = await openaiService.generateResponse(updatedMessages, apiKey);
    
    // Remove loading message and add the actual response
    setMessages(prev => {
      const filtered = prev.filter(msg => !msg.isLoading);
      return [...filtered, { text: response, isUser: false }];
    });
  } catch (error) {
    console.error('Error:', error);
    setMessages(prev => {
      const filtered = prev.filter(msg => !msg.isLoading);
      return [
        ...filtered, 
        { text: "Sorry, I encountered an error. Please check your API key and try again.", isUser: false }
      ];
    });
  }
};

// Add this JSX before the ChatContainer to handle API key input
if (showApiKeyPrompt) {
  return (
    <div style={{ maxWidth: '500px', margin: '100px auto', padding: '2rem', boxShadow: '0 4px 6px rgba(0,0,0,0.1)', borderRadius: '10px' }}>
      <h2 style={{ marginBottom: '1rem', fontSize: '1.5rem', fontWeight: 'bold' }}>Enter your OpenAI API Key</h2>
      <p style={{ marginBottom: '1rem', color: '#666' }}>
        Your API key is used only for making requests to OpenAI and is not stored on our servers.
      </p>
      <input
        type="password"
        placeholder="sk-..."
        value={apiKey}
        onChange={(e) => setApiKey(e.target.value)}
        style={{ width: '100%', padding: '0.5rem', marginBottom: '1rem', borderRadius: '4px', border: '1px solid #ddd' }}
      />
      <button
        onClick={() => setShowApiKeyPrompt(false)}
        disabled={!apiKey.startsWith('sk-')}
        style={{ 
          background: apiKey.startsWith('sk-') ? '#007afe' : '#cccccc',
          color: 'white',
          border: 'none',
          padding: '0.5rem 1rem',
          borderRadius: '4px',
          cursor: apiKey.startsWith('sk-') ? 'pointer' : 'not-allowed'
        }}
      >
        Start Chatting
      </button>
    </div>
  );
}</code></pre>
  </div>

  <h2 class="text-2xl font-bold mb-4">Step 4: Updating App.js</h2>
  <p class="mb-4">Finally, let's update the <code>App.js</code> file to use our chat interface:</p>

  <div class="bg-gray-800 text-white p-4 rounded-md mb-8 overflow-x-auto">
    <pre><code>import React from 'react';
import './App.css';
import ChatInterface from './ChatInterface';

function App() {
  return (
    <div className="App">
      <ChatInterface />
    </div>
  );
}

export default App;</code></pre>
  </div>

  <h2 class="text-2xl font-bold mb-4">Step 5: Testing and Deployment</h2>
  <p class="mb-4">Now that our chatbot is set up, you can test it locally by running:</p>

  <div class="bg-gray-800 text-white p-4 rounded-md mb-6 overflow-x-auto">
    <pre><code>npm start</code></pre>
  </div>

  <p class="mb-6">You'll need to enter your OpenAI API key when prompted, and then you can start chatting with your AI assistant.</p>

  <div class="glass p-6 mb-8">
    <h3 class="text-xl font-bold mb-4">Security Note</h3>
    <p class="text-red-600 dark:text-red-400">
      Never commit your API key to version control or expose it in client-side code in a production environment. 
      In a real application, you would handle API requests on a server and use environment variables to securely store your API key.
    </p>
  </div>

  <p class="mb-4">To deploy your application, you can use services like Vercel, Netlify, or GitHub Pages:</p>

  <div class="bg-gray-800 text-white p-4 rounded-md mb-8 overflow-x-auto">
    <pre><code># For Netlify deployment
npm install netlify-cli -g
netlify deploy</code></pre>
  </div>

  <h2 class="text-2xl font-bold mb-4">Next Steps and Enhancements</h2>
  <p class="mb-6">Here are some ways you can enhance your chatbot:</p>

  <ul class="list-disc pl-6 space-y-2 mb-8">
    <li>Add conversation history persistence using local storage</li>
    <li>Implement typing indicators and animations</li>
    <li>Add the ability to clear the conversation</li>
    <li>Create a server-side component to securely handle API calls</li>
    <li>Implement different AI personalities or modes</li>
    <li>Add voice input and output capabilities</li>
  </ul>

  <div class="mb-8">
    <Card className="bg-primary/5">
      <h3 class="text-xl font-semibold mb-4">Resources</h3>
      <ul class="space-y-2">
        <li>
          <a href="https://platform.openai.com/docs/api-reference" target="_blank" rel="noopener noreferrer" class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M6.672 1.911a1 1 0 10-1.932.518l.259.966a1 1 0 001.932-.518l-.26-.966zM2.429 4.74a1 1 0 10-.517 1.932l.966.259a1 1 0 00.517-1.932l-.966-.26zm8.814-.569a1 1 0 00-1.415-1.414l-.707.707a1 1 0 101.415 1.415l.707-.708zm-7.071 7.072l.707-.707A1 1 0 003.465 9.12l-.708.707a1 1 0 001.415 1.415zm3.2-5.171a1 1 0 00-1.3 1.3l4 10a1 1 0 001.823.075l1.38-2.759 3.018 3.02a1 1 0 001.414-1.415l-3.019-3.02 2.76-1.379a1 1 0 00-.076-1.822l-10-4z" clip-rule="evenodd" />
            </svg>
            OpenAI API Documentation
          </a>
        </li>
        <li>
          <a href="https://reactjs.org/docs/getting-started.html" target="_blank" rel="noopener noreferrer" class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M6.672 1.911a1 1 0 10-1.932.518l.259.966a1 1 0 001.932-.518l-.26-.966zM2.429 4.74a1 1 0 10-.517 1.932l.966.259a1 1 0 00.517-1.932l-.966-.26zm8.814-.569a1 1 0 00-1.415-1.414l-.707.707a1 1 0 101.415 1.415l.707-.708zm-7.071 7.072l.707-.707A1 1 0 003.465 9.12l-.708.707a1 1 0 001.415 1.415zm3.2-5.171a1 1 0 00-1.3 1.3l4 10a1 1 0 001.823.075l1.38-2.759 3.018 3.02a1 1 0 001.414-1.415l-3.019-3.02 2.76-1.379a1 1 0 00-.076-1.822l-10-4z" clip-rule="evenodd" />
            </svg>
            React Documentation
          </a>
        </li>
        <li>
          <a href="https://axios-http.com/docs/intro" target="_blank" rel="noopener noreferrer" class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M6.672 1.911a1 1 0 10-1.932.518l.259.966a1 1 0 001.932-.518l-.26-.966zM2.429 4.74a1 1 0 10-.517 1.932l.966.259a1 1 0 00.517-1.932l-.966-.26zm8.814-.569a1 1 0 00-1.415-1.414l-.707.707a1 1 0 101.415 1.415l.707-.708zm-7.071 7.072l.707-.707A1 1 0 003.465 9.12l-.708.707a1 1 0 001.415 1.415zm3.2-5.171a1 1 0 00-1.3 1.3l4 10a1 1 0 001.823.075l1.38-2.759 3.018 3.02a1 1 0 001.414-1.415l-3.019-3.02 2.76-1.379a1 1 0 00-.076-1.822l-10-4z" clip-rule="evenodd" />
            </svg>
            Axios Documentation
          </a>
        </li>
      </ul>
    </Card>
  </div>

  <h2 class="text-2xl font-bold mb-4">Conclusion</h2>
  <p class="mb-6">
    Congratulations! You've built a functional AI chatbot using React and the OpenAI API. This project serves as a great starting point for more complex AI-powered applications. The possibilities are endless - from customer support bots to language learning assistants.
  </p>
  
  <p class="mb-8">
    Remember that as you develop AI applications, it's important to consider ethics, privacy, and the responsible use of AI technology. Always be transparent with users about how their data is being used and what they're interacting with.
  </p>

  <div class="flex flex-col sm:flex-row gap-4">
    <Button href="/blog/artificial-intelligence-tutorials" variant="primary">
      Explore More Tutorials
    </Button>
    <Button href="/contact" variant="outline">
      Questions? Contact Us
    </Button>
  </div>
</BlogLayout>
